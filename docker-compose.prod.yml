services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: file-management-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_PATH=/app/data/database.sqlite
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      - UPLOAD_PATH=/app/data/uploads
      - MAX_FILE_SIZE=10737418240
    volumes:
      - file_data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - file_management_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: file-management-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - file_management_network

  nginx:
    image: nginx:alpine
    container_name: file-management-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - file_data:/var/www/data:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - file_management_network

  # 可选：Redis缓存
  redis:
    image: redis:7-alpine
    container_name: file-management-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - file_management_network
    profiles:
      - cache

  # 可选：监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: file-management-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - file_management_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: file-management-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    networks:
      - file_management_network
    profiles:
      - monitoring

volumes:
  file_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  file_management_network:
    driver: bridge
